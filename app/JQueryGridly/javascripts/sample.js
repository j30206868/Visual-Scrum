// Generated by CoffeeScript 1.6.3



(function() {
  $(function() {
    
	//宣告需使用之 參數 函式
	var taskCount = 0;
	var idCount = 0;
	
	//停止sortable的propagate
	var stopSortablePropagate = function(evt){
		evt.preventDefault();
		evt.stopPropagation();
	}
		
	// 加入 子任務
	var activeAddLiEvent = function(evt){
	
		evt.preventDefault();
		evt.stopPropagation();
		
		//創建 子任務node
		idCount++;
		var subTaskContainer = this.parentNode.getElementsByClassName('sortable')[0];
		
		var subTaskLi = document.createElement('li');
		subTaskLi.setAttribute('class', 'ui-state-default external-event');
		var subTaskSpan = document.createElement('span');
		subTaskSpan.setAttribute('class', 'ui-icon ui-icon-arrowthick-2-n-s');
		subTaskLi.setAttribute('id', idCount);
		
		//計算子任務數量
		if( subTaskContainer.getAttribute('subTaskCount') ){
			subTaskContainer.setAttribute('subTaskCount', parseInt( subTaskContainer.getAttribute('subTaskCount') )+1 );
		}else{
			subTaskContainer.setAttribute('subTaskCount', 1);
		}
		
		subTaskLi.appendChild( subTaskSpan  );
		subTaskLi.appendChild( document.createTextNode( '子任務'+subTaskContainer.getAttribute('subTaskCount') ) );

		subTaskContainer.appendChild( subTaskLi );
		
		
		//停止sortable 的事件傳遞
		$( ".sortable" ).off('mousedown', stopSortablePropagate);
		$( ".sortable" ).on('mousedown', stopSortablePropagate);
	
	}
	
	//宣告需使用之 參數 函式

	
	$(document).on("click", ".gridly .brick", function(event) {
      var $this, sizeW, sizeH;
      event.preventDefault();
      event.stopPropagation();
      $this = $(this);
      $this.toggleClass('small');
      $this.toggleClass('large');
      if ($this.hasClass('small')) {
        sizeW = 140;
		sizeH = 60;
      }
      if ($this.hasClass('large')) {
        sizeW = 300;
		sizeH = 300;
      }
      $this.data('width', sizeW);
      $this.data('height', sizeH);
      return $('.gridly').gridly('layout');
    });
    $(document).on("click", ".gridly .delete", function(event) {
      var $this;
      event.preventDefault();
      event.stopPropagation();
      $this = $(this);
      $this.closest('.brick').remove();
      return $('.gridly').gridly('layout');
    });
    $(document).on("click", ".add", function(event) {
	
	  taskCount++;	
	
	  var brick = '<div class="brick small"><div class="delete">&times;</div><br /><font style="font-size:16pt; ">主要任務'+taskCount+'</font><input style="float:right;" type="button" value="+" class="addLi" /><div>　</div><ul class="sortable connectedSortable"></ul></div>';
		
      event.preventDefault();
      event.stopPropagation();
      $('.gridly').append(brick);
	  
	//test code
	
		//Activate sortable區域

		$( ".sortable" ).sortable({
			connectWith: ".connectedSortable",
			dropOnEmpty:true,
			refreshPositions: true,
			helper: function(e, elt){
				
				var helperUl = document.createElement('ul');
				helperUl.setAttribute('class', 'sortable connectedSortable');
				helperUl.appendChild( elt.clone()[0] );
				
				return helperUl;
			},
			appendTo: 'body',
			zIndex: 10000,
			//tolerance: 'pointer',
			start: function(ev, ui) {		
				// create an Event Object (http://arshaw.com/fullcalendar/docs/event_data/Event_Object/)
				var eventObject = {
					id:    				$.trim($(ui.item).attr('id')),  // use the element's id as the event id
					title: 				$.trim($(ui.item).text()), 		// use the element's text as the event title
					start: 				new Date("2013-02-18T18:00:00"),//"2013-02-18T18:00:00", //day,
					end: 				new Date("2013-02-18T18:00:00"),//"2013-02-18T18:00:00",//day,
					backgroundColor: 	$(ui.item).css('background-color'),
					borderColor: 		$(ui.item).css('background-color'),
					textColor: 			$(ui.item).css('color'),
					allDay: true 
					};
			
				// store the Event Object in the DOM element so we can get to it later
				$(ui.item).data('eventObject', eventObject);
				$(ui.item).data('dropped', false);
		
				return  true;      
			},
			stop: function(ev, ui) {
				// Restore place of Event Object if dropped
				if ( $(ui.draggable).data('dropped') == true ) {
					$('ol#sortable-events').nestedSortable('cancel'); 
					$(ui.draggable).data('dropped') = false ;
				}
				
				//防止 在排序calendar時 意外的把subtask拖到別的地方去
				if( $('#calendarContainer').css('display') == 'block' ){
					$(this).sortable( "cancel" );
					alert( 'dropped' );
				}
			}
			
		});
		$( ".sortable" ).disableSelection();
		
		$( ".sortable" ).sortable( "refresh" );
		
		//加入 add subtask 的按鈕功能 (須取消掉之前的事件 否則會一直迴圈增加)
		$('.addLi').off('click', activeAddLiEvent );
		$('.addLi').on('click', activeAddLiEvent ); 
		
	//test code
	
     $('.gridly').gridly();
    });
    $('.gridly').gridly({
		base: 140, // px 
    	gutter: 20, // px
    	columns: 6,
		sorted: false	
	});
  });

}).call(this);
